In the Casino Royale Blackjack simulation, there are 6 different bots that I created:

1- Bot1 makes move decisions based on basic strategy and makes betting decisions based on Hi-Lo card counting.
2- Bot2 is a neural network trained with the data that was generated by the decisions of Bot1
3- Bot3 is a neural network trained with the data that was generated by the decisions that I took (player)
4- Bot4 is a random forest based ML algorithm that makes decisions based on the data that was generated by Bot1
5- Bot5 is a decision tree based ML algorithm that makes decisions based on the data that was generated by me (player)
6- Bot6 is a reinforcement learning based bot that makes decisions based on Q-learning

In the simulation, the bots either play 300 hands or until they make 30% profit where they leave the table in each run and
I calculated 100 different runs to get an accurate picture of the performance of the bots.

I generated a .csv file to compare these performances and realized that the best performing bot out of all is Bot4 (random forest)
that had >30% profit for 51 times out of the 100 runs. On the other hand, it should be noted that every single bot was ineffectively in
a loss on average against the house (although again Bot4's loss was the smallest). I predict that the reason why this happened is because
the bots need a better betting strategy and the models should have been trained with a lot more data to make them more accurate. I am looking
forward to improving my models and strategies while collaborating with other developers on this issue.

Additionally, we can see that the decision tree/random forest based models performed better than the neural network based models while
the worst bot is bot2 that has a 70% loss on average each run.



